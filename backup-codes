<div x-data="{ selected: @entangle('selectedCategories') }" class="w-full">
    <div class="p-2 grid grid-cols-2 md:grid-cols-3 lg:grid-cols-8 gap-4">
        @foreach($categories as $cat)
            <div @click="selected = [{{ $cat->id }}]" 
                :class="selected.includes({{ $cat->id }}) ? 'border-blue-500' : 'border-gray-300'"
                class="flex flex-col items-center p-4 rounded-md border-2 cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700 transition">
                
                <input type="checkbox" wire:model.live="selectedCategories" value="{{ $cat->id }}" class="hidden">
                
                <img src="{{ asset('storage/' . $cat->image) }}" alt="{{ $cat->name }}" class="h-16 w-16 object-cover rounded-md">
                <label class="text-sm text-gray-700 dark:text-gray-200 cursor-pointer mt-2 text-center">{{ $cat->name }}</label>
            </div>
        @endforeach
    </div>
</div>


        //   $this->conversations = Auth::user()
        //     ->allConversations()
        //     ->with([
        //         'senderable',
        //         'receiverable',
        //         'messages' => function ($query) {
        //         $query->latest()->select('id', 'filachat_conversation_id', 'message', 'senderable_id', 'receiverable_id', 'last_read_at', 'created_at');
        //     }
        //     ])
        //     ->latest('updated_at')
        //     ->get();  

            // Get unread message count or any dynamic data
            // $this->messages = FilachatMessage::where(function($query) {
            //     $query->where('receiverable_id', auth()->id())  // Check receiver
            //         ->whereNull('last_read_at');
            // })
            // ->distinct('filachat_conversation_id') // Ensure uniqueness
            // ->get();

            

            // Filament::serving(function () {
        //     // Get unread message count or any dynamic data
        //     $unreadCount = FilachatMessage::where(function($query) {
        //         $query->where('receiverable_id', auth()->id())  // Check receiver
        //             ->whereNull('last_read_at');
        //     })
        //     ->orWhere(function($query) {
        //         $query->where('senderable_id', auth()->id())  // Check sender
        //             ->whereNull('last_read_at');
        //     })
        //     ->distinct('filachat_conversation_id') // Ensure uniqueness
        //     ->count();

        //     // Dynamically modify the navigation label
        //     config([
        //         'filachat.navigation_label' => 'Chat (' . $unreadCount . ')',
        //     ]);
        // });




class FavoriteResource extends Resource
{
    protected static ?string $model = Favorite::class;

    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\TextInput::make('user_id')
                    ->required()
                    ->numeric(),
                Forms\Components\TextInput::make('product_id')
                    ->required()
                    ->numeric(),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
        ->columns([
            Grid::make()
            ->columns(1)
            ->schema([
                    ImageColumn::make('product.images')
                        ->getStateUsing(fn ($record) => $record->product->images[0] ?? null) // Get the first image
                        ->label('Product Image')
                        ->width(200)
                        ->height(200), // Optional: Makes the image round
                    TextColumn::make('product.name')
                        ->label('Product Name'),
                    Tables\Columns\TextColumn::make('product.price')
                        ->formatStateUsing(fn ($state) => number_format($state, 2) . ' DA')
                        ->sortable(),
                    Tables\Columns\TextColumn::make('product.moq')
                        ->sortable(),
                    Tables\Columns\IconColumn::make('product.is_active')
                        ->sortable()
                        ->falseIcon('heroicon-o-clock')
                        ->trueIcon('heroicon-o-check-circle')
                        ->color(fn ($state) => $state ? 'success' : 'warning')
                        ->boolean(), // Custom icon when inactive
                    Tables\Columns\TextColumn::make('created_at')
                        ->dateTime()
                        ->sortable()
                        ->toggleable(isToggledHiddenByDefault: true),
                    Tables\Columns\TextColumn::make('updated_at')
                        ->dateTime()
                        ->sortable()
                        ->toggleable(isToggledHiddenByDefault: true),
                ])
            
        ])
        ->contentGrid([
            'md' => 2,
            'xl' => 3
        ])
           
            ->filters([
                //
            ])
            ->actions([
                // Tables\Actions\EditAction::make(),
            ])
            ->bulkActions([
                // Tables\Actions\BulkActionGroup::make([
                //     Tables\Actions\DeleteBulkAction::make(),
                // ]),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListFavorites::route('/'),
            'create' => Pages\CreateFavorite::route('/create'),
            'edit' => Pages\EditFavorite::route('/{record}/edit'),
        ];
    }
}


<div class="flex md:order-2 space-x-3 md:space-x-0 rtl:space-x-reverse ml-auto">
        @if(!Auth::check())
        <button wire:click="goToLogin" type="button" class="text-arab text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-4 py-2 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">الدخول</button>
        @else
        <!-- <button wire:click="goToProducts" type="button" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-4 py-2 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Show Products</button> -->
        <button wire:click="goToHome" 
        type="button" 
        class="ml-4 text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium 
            rounded-lg text-sm px-4 py-2 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 
            sm:block hidden">

            View Dashboard
        </button>

        <!-- Mobile Avatar -->
        <button wire:click="goToHome" 
            type="button" 
            class="sm:hidden w-8 h-8 rounded-full border border-gray-500 border-2 flex items-center justify-center">
            

            <!-- User Avatar Icon -->
            <svg class="w-6 h-6 text-gray-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                    d="M12 14a5 5 0 100-10 5 5 0 000 10zm0 2c-4.418 0-8 1.79-8 4v1h16v-1c0-2.21-3.582-4-8-4z"/>
            </svg>


        </button>
        @endif
</div>

    // $authenticatedBuyerId = auth()->id();
        // $existingConversation = FilachatConversation::where(function($query) use($authenticatedBuyerId, $seller_id){
        //     $query->where('senderable_id', $authenticatedBuyerId)
        //         ->where('receiverable_id', $seller_id);
        // })->orWhere(function($query) use($authenticatedBuyerId, $seller_id){
        //     $query->where('senderable_id', $seller_id)
        //         ->where('receiverable_id', $authenticatedBuyerId);
        // })->first();

        // if($existingConversation){
        //     $product = Product::find($product_id);
        //     $inquiry = Inquiry::create([
        //         'filachat_conversation_id' => $existingConversation->id,
        //         'product_id' => $product->id
        //     ]);

        //     return redirect()->to('buyer/filachat/' . $existingConversation->id);
        // } 

        <section  style="background: linear-gradient(to bottom, #FFFFFF,rgb(199, 224, 254));">

        <!-- <a href="/filachat">
            <button class="py-4 px-1 mx-1 ml-4 mr-2 sm:mr-4 relative border-2 border-transparent text-gray-800 rounded-full hover:text-gray-400 focus:outline-none focus:text-gray-500 transition duration-150 ease-in-out" aria-label="Messages">
                <x-heroicon-o-chat-bubble-left-ellipsis class="h-7 w-7" />


                @if($unreadCount > 0)
                    <span class="absolute inset-0 object-right-top -mr-6 mt-1">
                        <div class="inline-flex items-center px-1.5 border-2 border-white rounded-full text-xs font-semibold leading-4 bg-red-500 text-white">
                            {{$unreadCount}}
                        </div>
                    </span>
                @endif
            </button>
        </a> -->


        @php $categoryNumber = 1; @endphp

<div class="grid sm:grid-cols-3 gap-6 mb-4">
    @foreach($topProducts as $category => $products)
                            
        <div class="bg-white p-4 rounded-lg shadow">
            <h2 class="text-lg font-semibold mb-3 text-center bg-gray-100 p-2 rounded">
                <span class="mr-2 bg-yellow-500 text-white px-2 py-1 rounded-tr-md rounded-bl-md text-sm font-bold">
                #{{ $categoryNumber }}
                @php $categoryNumber++; @endphp
                </span>
                {{ $category }}
            </h2>
            
            <div class="grid gap-4">
                @foreach($products as $index => $product)
                <div class="flex items-center gap-3">
                    <div class="relative w-24 shrink-0">
                        <img src="{{ asset('storage/' . $product->images[0]) }}" 
                            class="w-24 h-24 object-cover rounded-lg" 
                            alt="{{ $product->name }}">
                    </div>
                    <div class="w-full">
                        <p class="text-base text-gray-600">{{ $product->name }}</p>
                    </div>
                </div>

                @endforeach
            </div>
        </div>
    @endforeach
</div>


<div>
    <div class="flex gap-4 flex-row items-center mb-2">
        <h1 class="text-2xl sm:text-3xl font-bold leading-6 text-gray-950 dark:text-white">
            Categories
        </h1>
    </div>
    <div x-data="{
        selected: @entangle('selectedCategories'),
        startIndex: 0,
        perPage: 4, // Desktop: Show 4 items per page
        isDesktop: window.innerWidth >= 769,
        mobileViewWidth: window.innerWidth < 769 ? 'calc(100% / 2.5)' : '25%', // Show 2.5 items on mobile
        updateLivewire(id) {
            this.selected = [id]; 
            $wire.set('selectedCategories', this.selected);
        },
        next() {
            if (this.isDesktop && this.startIndex + this.perPage < {{ count($categories) }}) {
                this.startIndex += this.perPage;
            }
        },
        prev() {
            if (this.isDesktop && this.startIndex > 0) {
                this.startIndex -= this.perPage;
            }
        },
        updateScreenSize() {
            this.isDesktop = window.innerWidth >= 769;
            this.mobileViewWidth = this.isDesktop ? '25%' : 'calc(100% / 2.5)'; // Adjust width dynamically
            if (!this.isDesktop) {
                this.startIndex = 0; // Reset for mobile
            }
        }
        }" 
        x-init="updateScreenSize(); window.addEventListener('resize', updateScreenSize)" 
        class="w-full flex items-center justify-between">

        <!-- Previous Button (Hidden on Mobile) -->
        <button @click="prev" 
                :disabled="startIndex === 0" 
                class="hidden sm:hidden md:flex lg:flex w-10 h-10 md:w-14 md:h-12 items-center justify-center bg-gray-200 text-gray-800 rounded-full disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-300 transition">
            ❮
        </button>

        <!-- Scrollable Category Container -->
        <div x-ref="scrollContainer" class="relative w-full overflow-x-auto md:overflow-hidden scroll-smooth space-x-4 py-2 scrollbar-hide">
            <div class="flex transition-transform duration-500 ease-in-out"
                :style="isDesktop ? 'transform: translateX(-' + (startIndex * (100 / perPage)) + '%)' : ''">
                
                @foreach($categories as $cat)
                    <div class="flex-shrink-0 p-2" :style="'width: ' + mobileViewWidth">
                        <div @click="updateLivewire({{ $cat->id }})"
                            :class="selected.includes({{ $cat->id }}) ? 'border-blue-500 bg-blue-100' : 'border-gray-300 bg-white'"
                            class="flex flex-col items-center rounded-full cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700 transition-all">
                            
                            <input type="checkbox" wire:model="selectedCategories" value="{{ $cat->id }}" class="hidden">
                            
                            <!-- Rounded Image -->
                            <img src="{{ asset('storage/' . $cat->image) }}" alt="{{ $cat->name }}" 
                                class="w-full object-cover rounded-full border-2 border-gray-300 shadow-sm">
                                
                            <!-- <label class="text-sm font-semibold text-gray-800 dark:text-gray-200 cursor-pointer mt-2 text-center">
                                {{ $cat->name }}
                            </label> -->
                        </div>
                    </div>
                @endforeach
            </div>
        </div>

        <!-- Next Button (Hidden on Mobile) -->
        <button @click="next" 
                :disabled="startIndex + perPage >= {{ count($categories) }}" 
                class="hidden sm:hidden md:flex lg:flex w-10 h-10 md:w-14 md:h-12 items-center justify-center bg-gray-200 text-gray-800 rounded-full disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-300 transition">
            ❯
        </button>
    </div>
</div>


$deliveredOrders = \App\Models\Order::where('seller_id', $user->id)
        ->where('status', 'Delivered')
        ->where('approved', 1)
        ->count();

    // Define badge levels with icons
    if ($deliveredOrders >= 50) {
        $badge = [
            'label' => "Expert ($deliveredOrders Delivered)",
            'color' => 'bg-green-500',
            'icon' => 'heroicon-o-academic-cap' // Graduation cap icon
        ];
    } elseif ($deliveredOrders >= 10) {
        $badge = [
            'label' => "Intermediate ($deliveredOrders Delivered)",
            'color' => 'bg-blue-500',
            'icon' => 'heroicon-o-trending-up' // Growth icon
        ];
    } elseif ($deliveredOrders >= 1) {
        $badge = [
            'label' => __('Beginner') . " ($deliveredOrders Delivered)",
            'color' => 'bg-yellow-500',
            'icon' => 'heroicon-o-light-bulb' // Lightbulb icon
        ];
    } else {
        $badge = [
            'label' => __('New Seller'),
            'color' => 'bg-gray-400',
            'icon' => 'heroicon-o-user' // User icon
        ];
    }

    {{-- Badge with Icon --}}
    <a href="{{ url('/seller/ranking') }}">
    <span class="ml-2 flex items-center gap-1 px-3 py-1 text-xs font-semibold text-white rounded-full {{ $badge['color'] }}">
    <x-dynamic-component :component="$badge['icon']" class="w-4 h-4" />
    <span class="text-base font-bold">{{ explode('(', $badge['label'])[0] }}</span>  
    <span class="text-xs opacity-80">({{ $deliveredOrders }} {{ __('Delivered') }})</span>
    <x-heroicon-o-arrow-right class="w-3 h-3" />
    </span>
    
    </a>



    @if (!request()->is('/dashboard')) 
<div class="max-w-md w-full relative sm:absolute left-auto sm:left-20 px-2">
    <form action="{{ route('products') }}" method="GET">
        <label for="default-search" class="mb-2 text-sm font-medium text-gray-900 sr-only">Search</label>
        <div class="relative">
            <div class="absolute inset-y-0 start-0 flex items-center ps-3 pointer-events-none">
                <svg class="w-4 h-4 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"/>
                </svg>
            </div>
            <!-- Input Field -->
            <input 
                type="text" 
                name="searchTerm" 
                id="default-search"
                placeholder="Search products..." 
                class="block w-full h-10 p-2.5 pl-10 text-sm text-gray-900 border border-gray-300 rounded-full bg-gray-50 focus:ring-blue-500 focus:border-blue-500" 
            >
        </div>
    </form>
</div>
@endif



<div x-data="{ showDiv: false }">
                        <!-- Check Button -->
                        <div class="inline-flex items-center">
                        <label class="inline-flex gap-2 items-center cursor-pointer space-x-3">
                            <span class="text-gray-700 text-sm font-medium">منتجات أخرى</span>
                            <input
                                type="checkbox"
                                x-model="showDiv"
                                class="h-5 w-5 text-green-600 border-gray-300 rounded focus:ring-green-500 focus:ring-2 transition duration-150 ease-in-out"
                            />
                        </label>


                        </div>


                        <div x-show="showDiv" x-transition>

                            @foreach ($selectedProducts as $selectedProduct)
                                <label class="border rounded-md p-4 flex items-center cursor-pointer shadow-sm hover:bg-gray-100 transition"
                                x-data="{ isChecked: false }"
                                :class="{ 'bg-primary-100 border-primary-500': isChecked }"
                                x-init="$watch('isChecked', value => { 
                                    if (value) { 
                                        $wire.set('selectedProduct', {{ $selectedProduct->id }});
                                    } 
                                })"                        
                                x-effect="isChecked = ($wire.selectedProduct == {{ $selectedProduct->id }})">
                                    
                                    <!-- Visible Custom Radio -->
                                    <div class="w-5 h-5 border-2 border-gray-400 rounded-full flex items-center justify-center mr-4">
                                        <div class="w-3 h-3 bg-primary-500 rounded-full" x-show="isChecked"></div>
                                    </div>

                                    <!-- Hidden Radio Input -->
                                    <input type="radio" value="{{ $selectedProduct->id }}" name="product_selection"
                                        wire:model="selectedProduct"
                                        wire:click="processStepTwo({{ $selectedProduct->quantity ?? 0}})"
                                        class="hidden"
                                        x-on:change="isChecked = true">

                                    <!-- Product Image -->
                                    @if ($selectedProduct->images[0])  
                                        <img src="{{ asset('storage/' . $selectedProduct->images[0]) }}" 
                                            alt="{{ $selectedProduct->name }}" 
                                            class="w-20 h-20 object-cover rounded mr-4">
                                    @else
                                        <div class="w-20 h-20 bg-gray-300 rounded flex items-center justify-center"> 
                                            <span class="text-gray-500">No Image</span>
                                        </div>
                                    @endif

                                    <!-- Product Info -->
                                    <div class="text-sm">
                                        <p class="font-medium text-gray-900">{{ $selectedProduct->name }}</p>
                                        <p class="text-gray-500">{{ $selectedProduct->price }}</p>
                                    </div>
                                </label>
                            @endforeach

                        </div>

                    </div>
